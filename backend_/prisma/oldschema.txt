// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  // createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt
  userId            String         @unique
  email             String         @unique
  username          String         @unique
  displayName       String
  image             String
  dmAdmin           DM[]
  messages          Message[]
  // historyAdmin MatchHistory[] @relation("userHistory")
  // historyOpponent MatchHistory[] @relation("opponentHistory")
  // participant DM[]  @relation("participant")
  // Admin Notification[] @relation("Admin")
  participantNotifs Notification[] @relation("participantNotif")
  // roomMember RoomMember[] @relation("roomMember")
  // requestSender friendRequest[]
  // fdId  Int
  // friends FriendList @relation(fields: [fdId], references: [id])
  // bannedUserId  Int
  // banned User[] @relation(fields: [bannedUserId], references: [id])
  bannedUsers       Int[]
  rooms             RoomMember[]
}

model Message {
  id             Int      @id @default(autoincrement())
  sentAt         DateTime
  messageContent String
  dmId           Int
  userId         Int
  // roomId         Int
  dm             DM       @relation(fields: [dmId], references: [id])
  sender         User     @relation(fields: [userId], references: [id])
  // room           Room     @relation(fields: [roomId], references: [id])
  // Room           Room?    @relation(fields: [roomId], references: [id])
  // roomId         Int?
  Room           Room?    @relation(fields: [roomId], references: [id])
  roomId         Int?
}

model DM {
  id            Int       @id @default(autoincrement())
  participantId Int
  // participantId Int
  // msgId Int
  participant   User      @relation(fields: [participantId], references: [id])
  // participant RoomMember @relation("participant", fields: [participantId], references: [id])
  // participants RoomMember[]
  msg           Message[]
}

model BannedUser {
  id     Int @id @default(autoincrement())
  userId Int
  // user User @relation(fields: [userId], references: [id])
}

model FriendList {
  id Int @id @default(autoincrement())
  // friends User[]
}

model friendRequest {
  id       Int @id @default(autoincrement())
  senderId Int
  // sender  User @relation(fields: [senderId], references: [id])
}

model MatchHistory {
  id     Int @id @default(autoincrement())
  userId Int
  // user User @relation("userHistory" ,fields: [userId], references: [id])notif read boolean

  opponentId Int
  // opponent User @relation("opponentHistory" ,fields: [opponentId], references: [id])
  GameResult String
}

model Notification {
  id             Int     @id @default(autoincrement())
  senderId       Int
  type           String
  read           Boolean @default(false)
  interactedWith Boolean @default(false)

  roomId      Int?
  matchId     Int?
  friendreqId Int?
  participant User @relation("participantNotif", fields: [senderId], references: [id])
}

model Room {
  id          Int          @id @default(autoincrement())
  // msgs        Message[]
  //improve later (pic)
  RoomName    String
  RoomMembers RoomMember[]
  Message     Message[]
}

model RoomMember {
  id       Int      @id @default(autoincrement())
  RoomId   Int
  memberId Int
  role     Role     @default(USER)
  muted    Boolean  @default(false)
  room     Room     @relation(fields: [RoomId], references: [id])
  member   User     @relation(fields: [memberId], references: [id])
  joinTime DateTime
  // leftTime DateTime
}

// model MatchHistory {

//   id Int @id @default(autoincrement())
//   // userId  Int
//   // user User @relation(fields: [userId], references: [id])
//   opponent User @relation(fields: [opponentId], references: [id])
//   opponentId  Int
//   GameResult  String

// }

enum Role {
  USER
  ADMIN
  OWNER
}
